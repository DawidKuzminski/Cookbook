// <auto-generated />
using System;
using CookbookService.Infrastrructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookbookService.Infrastrructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CookbookService.Domain.DayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int?>("MenuEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuEntityId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("CookbookService.Domain.DishEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("MealEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MealEntityId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("CookbookService.Domain.IngredientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("DishEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DishEntityId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("CookbookService.Domain.MealEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayEntityId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("CookbookService.Domain.MenuEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CookbookService.Domain.DayEntity", b =>
                {
                    b.HasOne("CookbookService.Domain.MenuEntity", null)
                        .WithMany("Days")
                        .HasForeignKey("MenuEntityId");
                });

            modelBuilder.Entity("CookbookService.Domain.DishEntity", b =>
                {
                    b.HasOne("CookbookService.Domain.MealEntity", null)
                        .WithMany("Dishes")
                        .HasForeignKey("MealEntityId");
                });

            modelBuilder.Entity("CookbookService.Domain.IngredientEntity", b =>
                {
                    b.HasOne("CookbookService.Domain.DishEntity", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DishEntityId");
                });

            modelBuilder.Entity("CookbookService.Domain.MealEntity", b =>
                {
                    b.HasOne("CookbookService.Domain.DayEntity", null)
                        .WithMany("Meals")
                        .HasForeignKey("DayEntityId");
                });

            modelBuilder.Entity("CookbookService.Domain.DayEntity", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("CookbookService.Domain.DishEntity", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CookbookService.Domain.MealEntity", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("CookbookService.Domain.MenuEntity", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
